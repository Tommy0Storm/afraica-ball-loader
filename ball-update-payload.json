{
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>afrAIca - Loading...</title>\n  <meta name=\"description\" content=\"afrAIca - Africa's Executive AI Intelligence Loading Page\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"author\" content=\"afrAIca PTY LTD\">\n  <meta property=\"og:title\" content=\"afrAIca - Africa's Executive AI Intelligence\">\n  <meta property=\"og:description\" content=\"Vendor-agnostic strategy, production-grade delivery, and sovereign-aware platforms.\">\n  <meta property=\"og:type\" content=\"website\">\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Google+Sans:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);\n      font-family: 'Google Sans', sans-serif;\n      height: 100vh;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n    }\n    .ball-container {\n      position: relative;\n      width: 400px;\n      height: 400px;\n    }\n    canvas {\n      border-radius: 50%;\n    }\n    .progress-bar {\n      position: absolute;\n      bottom: 50px;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 300px;\n      height: 4px;\n      background: rgba(255, 255, 255, 0.1);\n      border-radius: 2px;\n      overflow: hidden;\n    }\n    .progress-fill {\n      height: 100%;\n      background: linear-gradient(90deg, #00f5ff, #ff00aa);\n      width: 0%;\n      transition: width 0.3s ease;\n    }\n    .loading-text {\n      position: absolute;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      color: white;\n      font-size: 14px;\n      opacity: 0.7;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"ball-container\">\n    <canvas id=\"ballCanvas\" width=\"400\" height=\"400\"></canvas>\n    <div class=\"progress-bar\">\n      <div class=\"progress-fill\" id=\"progressFill\"></div>\n    </div>\n    <div class=\"loading-text\" id=\"loadingText\">Initializing afrAIca...</div>\n  </div>\n  <script>\n    // Check if already loaded to prevent loader loops\n    if (sessionStorage.getItem('afraica-loaded') === 'true') {\n      window.location.replace('/main-page');\n    }\n\n    // Ball loader implementation\n    const canvas = document.getElementById('ballCanvas');\n    const ctx = canvas.getContext('2d');\n    const progressFill = document.getElementById('progressFill');\n    const loadingText = document.getElementById('loadingText');\n\n    const PARTICLE_COUNT = 15000;\n    const PARTICLE_COLORS = [\n      { r: 255, g: 255, b: 255 },\n      { r: 222, g: 49, b: 99 },\n      { r: 75, g: 85, b: 99 }\n    ];\n    let rigidity = 1;\n    let particles = [];\n    const mouse = { x: null, y: null };\n    let animationFrameId = null;\n    let rotationX = 0, rotationY = 0;\n    let targetRotationX = 0, targetRotationY = 0;\n    let startTime = null;\n    let isSpinning = true;\n    let explosionStartTime = null;\n    let isExploding = false;\n    const SPIN_DURATION = 5;\n    const EXPLOSION_DURATION = 3;\n\n    const createParticles = (width, height) => {\n      particles = [];\n      const textCanvas = document.createElement('canvas');\n      const textCtx = textCanvas.getContext('2d');\n      const FONT_SIZE = 150;\n      textCanvas.width = 1024; textCanvas.height = 256;\n      textCtx.font = `bold ${FONT_SIZE}px Arial, sans-serif`;\n      textCtx.textAlign = 'center'; textCtx.textBaseline = 'middle';\n      const metricsAfr = textCtx.measureText('afr');\n      const metricsAI = textCtx.measureText('AI');\n      const totalWidth = metricsAfr.width + metricsAI.width + textCtx.measureText('ca').width;\n      const startX = (textCanvas.width - totalWidth) / 2;\n      textCtx.fillStyle = 'blue'; textCtx.fillText('afr', startX + metricsAfr.width / 2, 128);\n      textCtx.fillStyle = 'red'; textCtx.fillText('AI', startX + metricsAfr.width + metricsAI.width / 2, 128);\n      textCtx.fillStyle = 'green'; textCtx.fillText('ca', startX + metricsAfr.width + metricsAI.width + textCtx.measureText('ca').width / 2, 128);\n      const imageData = textCtx.getImageData(0, 0, textCanvas.width, textCanvas.height);\n\n      const sphereRadius = 1;\n      const goldenAngle = Math.PI * (3 - Math.sqrt(5));\n      const textMapRotY = -Math.PI / 2;\n      const cosTextMapY = Math.cos(textMapRotY), sinTextMapY = Math.sin(textMapRotY);\n      const finalRotX = Math.PI;\n      const finalRotY = Math.PI;\n      const cosFinalX = Math.cos(finalRotX), sinFinalX = Math.sin(finalRotX);\n      const cosFinalY = Math.cos(finalRotY), sinFinalY = Math.sin(finalRotY);\n\n      for (let i = 0; i < PARTICLE_COUNT; i++) {\n        const y = 1 - (i / (PARTICLE_COUNT - 1)) * 2;\n        const radiusAtY = Math.sqrt(1 - y * y);\n        const theta = goldenAngle * i;\n        const x = Math.cos(theta) * radiusAtY, z = Math.sin(theta) * radiusAtY;\n\n        const textMapX = x * cosTextMapY - z * sinTextMapY;\n        const textMapZ = x * sinTextMapY + z * cosTextMapY;\n        const textMapY = y;\n        const particleLongitude = Math.atan2(textMapZ, textMapX);\n        const particleLatitude = Math.acos(textMapY);\n        let isTextParticle = false, particleColor;\n        const textBandHeight = 0.4;\n        const textBandStartLat = Math.PI * (1 - textBandHeight) / 2;\n        const textBandEndLat = Math.PI * (1 + textBandHeight) / 2;\n\n        if (particleLatitude > textBandStartLat && particleLatitude < textBandEndLat) {\n          const u = (particleLongitude + Math.PI) / (2 * Math.PI);\n          const v = (particleLatitude - textBandStartLat) / (textBandEndLat - textBandStartLat);\n          const textX = Math.floor(u * textCanvas.width), textY = Math.floor(v * textCanvas.height);\n          const pixelIndex = (textY * textCanvas.width + textX) * 4;\n          if (imageData.data[pixelIndex + 3] > 128) {\n            isTextParticle = true;\n            particleColor = imageData.data[pixelIndex] > 128 ? PARTICLE_COLORS[1] : PARTICLE_COLORS[0];\n          }\n        }\n        if (!isTextParticle) {\n          particleColor = Math.random() < 0.15 ? PARTICLE_COLORS[1] : PARTICLE_COLORS[2];\n        }\n\n        const x1 = x * cosFinalY - z * sinFinalY;\n        const z1 = x * sinFinalY + z * cosFinalY;\n        const y2 = y * cosFinalX - z1 * sinFinalX;\n        const z2 = y * sinFinalX + z1 * cosFinalX;\n        const x2 = x1;\n\n        const baseX3d = x2 * sphereRadius;\n        const baseY3d = y2 * sphereRadius;\n        const baseZ3d = z2 * sphereRadius;\n\n        const scale = Math.min(width, height) * 0.225;\n        const ballCenterY = height / 2 + 38;\n        particles.push({\n          x: (baseX3d * scale) + width / 2, y: (baseY3d * scale) + ballCenterY,\n          baseX: (baseX3d * scale) + width / 2, baseY: (baseY3d * scale) + ballCenterY,\n          baseX3d, baseY3d, baseZ3d,\n          vx: 0, vy: 0, z: baseZ3d, radius: 1, color: particleColor, density: Math.random() * 20 + 10,\n        });\n      }\n    };\n\n    const animate = () => {\n      const dpr = window.devicePixelRatio || 1;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const canvasWidth = canvas.width / dpr, canvasHeight = canvas.height / dpr;\n\n      if (!startTime) startTime = performance.now();\n      const elapsed = (performance.now() - startTime) / 1000;\n\n      // Update progress bar\n      const progress = Math.min((elapsed / (SPIN_DURATION + EXPLOSION_DURATION)) * 100, 100);\n      progressFill.style.width = progress + '%';\n\n      if (elapsed < SPIN_DURATION && isSpinning) {\n        targetRotationY += 0.05;\n        loadingText.textContent = 'Spinning up AI systems...';\n      } else if (isSpinning) {\n        isSpinning = false;\n        explosionStartTime = performance.now();\n        isExploding = true;\n        loadingText.textContent = 'Deploying intelligence...';\n      }\n\n      if (isExploding && explosionStartTime) {\n        const explosionElapsed = (performance.now() - explosionStartTime) / 1000;\n        if (explosionElapsed >= EXPLOSION_DURATION) {\n          isExploding = false;\n          rigidity = 1;\n          sessionStorage.setItem('afraica-loaded', 'true');\n          loadingText.textContent = 'Welcome to afrAIca';\n          setTimeout(() => {\n            window.location.replace('/main-page');\n          }, 500);\n        }\n      }\n\n      rotationY += (targetRotationY - rotationY) * 0.05;\n      rotationX += (targetRotationX - rotationX) * 0.05;\n\n      const scale = Math.min(canvasWidth, canvasHeight) * 0.225;\n      const centerX = canvasWidth / 2, centerY = canvasHeight / 2 + 38;\n      const cosX = Math.cos(rotationX), sinX = Math.sin(rotationX);\n      const cosY = Math.cos(rotationY), sinY = Math.sin(rotationY);\n      particles.sort((a, b) => a.z - b.z);\n\n      particles.forEach(p => {\n        let x1 = p.baseX3d * cosY - p.baseZ3d * sinY, z1 = p.baseX3d * sinY + p.baseZ3d * cosY;\n        let y2 = p.baseY3d * cosX - z1 * sinX, z2 = p.baseY3d * sinX + z1 * cosX;\n        p.z = z2; p.baseX = x1 * scale + centerX; p.baseY = y2 * scale + centerY;\n\n        if (!isExploding && rigidity >= 1.0) {\n          p.x = p.baseX; p.y = p.baseY; p.vx = 0; p.vy = 0;\n        } else {\n          if (isExploding) {\n            const dx = p.x - centerX;\n            const dy = p.y - centerY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (distance > 0) {\n              const explosionForce = 15;\n              p.vx += (dx / distance) * explosionForce;\n              p.vy += (dy / distance) * explosionForce;\n            }\n          }\n          p.x += p.vx; p.y += p.vy;\n        }\n\n        const opacity = 0.4 + ((p.z + 1) / 2) * 0.6;\n        p.radius = ((p.z + 1.5) / 2.5) * 2 + 0.5;\n        if (p.color.r > 100 || p.color.g > 100) {\n          ctx.shadowBlur = 15; ctx.shadowColor = `rgb(${p.color.r}, ${p.color.g}, ${p.color.b})`;\n        }\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(${p.color.r}, ${p.color.g}, ${p.color.b}, ${opacity})`;\n        ctx.fill();\n        ctx.shadowBlur = 0;\n      });\n\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    const handleResize = () => {\n      cancelAnimationFrame(animationFrameId);\n      const dpr = window.devicePixelRatio || 1;\n      const rect = canvas.getBoundingClientRect();\n      canvas.width = rect.width * dpr; canvas.height = rect.height * dpr;\n      ctx.scale(dpr, dpr);\n      const canvasWidth = canvas.width / dpr, canvasHeight = canvas.height / dpr;\n      createParticles(canvasWidth, canvasHeight);\n      animate();\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n  </script>\n</body>\n</html>"
}